"use strict";
var path_1 = require('path');
/* this is a very temporary approach to extracting deeplink data since the Angular compiler API has changed a bit */
function getLinksArrayContent(appNgModuleFileContent) {
    var deepLinksContentMatches = LINKS_REGEX.exec(appNgModuleFileContent.toString());
    if (deepLinksContentMatches && deepLinksContentMatches.length === 2) {
        return deepLinksContentMatches[1];
    }
    return null;
}
function extractDeepLinkPathData(appNgModuleFileContent) {
    var linksInternalContent = getLinksArrayContent(appNgModuleFileContent);
    if (!linksInternalContent) {
        return null;
    }
    var pathsList = extractRegexContent(appNgModuleFileContent, LOAD_CHILDREN_REGEX);
    var nameList = extractRegexContent(appNgModuleFileContent, NAME_REGEX);
    var expectedLength = pathsList.length;
    if (nameList.length !== expectedLength) {
        throw new Error("Expected " + expectedLength + " names in deep link config, found the following: " + nameList.join(','));
    }
    // metadata looks legit, let's do some looping shall we
    var deepLinkConfig = [];
    for (var i = 0; i < expectedLength; i++) {
        var moduleAndExport = pathsList[i].split('#');
        var path = moduleAndExport[0];
        var namedExport = moduleAndExport[1];
        var name_1 = nameList[i];
        deepLinkConfig.push({ modulePath: path, namedExport: namedExport, name: name_1 });
    }
    return deepLinkConfig;
}
exports.extractDeepLinkPathData = extractDeepLinkPathData;
function extractRegexContent(content, regex) {
    var match = null;
    var results = [];
    while ((match = regex.exec(content))) {
        if (!match) {
            break;
        }
        results.push(match[1]);
    }
    return results;
}
function getDeepLinkData(appNgModuleFilePath, appNgModuleFileContent, isAot) {
    var deepLinkConfigList = extractDeepLinkPathData(appNgModuleFileContent);
    if (!deepLinkConfigList) {
        return [];
    }
    var appDirectory = path_1.dirname(appNgModuleFilePath);
    var absolutePathSuffix = isAot ? '.ngfactory.ts' : '.ts';
    var modulePathSuffix = isAot ? '.ngfactory' : '';
    var namedExportSuffix = isAot ? 'NgFactory' : '';
    var hydratedDeepLinks = deepLinkConfigList.map(function (deepLinkConfigEntry) {
        return Object.assign({}, deepLinkConfigEntry, {
            modulePath: deepLinkConfigEntry.modulePath + modulePathSuffix,
            namedExport: deepLinkConfigEntry.namedExport + namedExportSuffix,
            absolutePath: path_1.join(appDirectory, deepLinkConfigEntry.modulePath + absolutePathSuffix)
        });
    });
    return hydratedDeepLinks;
}
exports.getDeepLinkData = getDeepLinkData;
var LINKS_REGEX = /links\s*?:\s*\[([\s|\S]*)\]/igm;
var LOAD_CHILDREN_REGEX = /loadChildren\s*?:\s*?['"`]\s*?(.*?)['"`]/igm;
var NAME_REGEX = /name\s*?:\s*?['"`]\s*?(.*?)['"`]/igm;
